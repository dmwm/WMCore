#!/bin/bash


#
# Global variables etc
#
THIS_SCRIPT=$(readlink -f $0)
PROJ_DIR=$(dirname $(dirname $THIS_SCRIPT))
ROOT_DIR=$(dirname $(dirname $(dirname $THIS_SCRIPT)))
PROJ_NAME=$(basename $PROJ_DIR)

COUCHDB_DIR="$ROOT_DIR/couchdb"
MYSQL_DIR="$ROOT_DIR/mysql"
WMCORE_DIR="$ROOT_DIR/wmcore"
WMAGENT_DIR=
export WMCORE_ROOT="$WMCORE_DIR/app"

MYSQL_INIT_DONE=0
COUCH_INIT_DONE=0
WMCORE_INIT_DONE=0
WMAGENT_INIT_DONE=0

MYSQL_DATABASE=
MYSQL_USER=
MYSQL_PASS=
COUCH_USER=
COUCH_PASS=

COUCH_HOST=127.0.0.1
COUCH_PORT=5984

REQMGR_HOSTNAME=
REQMGR_PORT=8687

GLOBAL_WORKQUEUE_HOSTNAME=
GLOBAL_WORKQUEUE_PORT=9996

LOCAL_WORKQUEUE_PORT=9997

if [ "$PROJ_NAME" == "reqmgr"  ]; then
    MYSQL_DATABASE="reqmgrdb"
    WMAGENT_DIR="$ROOT_DIR/reqmgr"
    WMAGENT_CONFIG=$WMAGENT_DIR/config/ReqMgrConfig.py
elif [ "$PROJ_NAME" == "workqueue"  ]; then
    MYSQL_DATABASE="workqueuedb"
    WMAGENT_DIR="$ROOT_DIR/workqueue"
    WMAGENT_CONFIG=$WMAGENT_DIR/config/WorkQueueConfig.py
else
    MYSQL_DATABASE="wmagentdb"
    WMAGENT_DIR="$ROOT_DIR/wmagent"
    WMAGENT_CONFIG=$WMAGENT_DIR/config/WMAgentConfig.py
fi    

if [ -e $MYSQL_DIR/logs/.mysqlinitdb ]; then MYSQL_INIT_DONE=1; else MYSQL_INIT_DONE=0; fi;
if [ -e $COUCHDB_DIR/logs/.couchinitdb ]; then COUCH_INIT_DONE=1; else COUCH_INIT_DONE=0; fi;    
if [ -e $WMAGENT_DIR/config/.wmagentinit ]; then WMAGENT_INIT_DONE=1; else WMAGENT_INIT_DONE=0; fi;
if [ -e $WMAGENT_DIR/config/.wmcoreinit ]; then WMCORE_INIT_DONE=1; else WMCORE_INIT_DONE=0; fi;

#
# Passwords/Secrets handling
#
load_secrets_file(){
    if [ "x$WMAGENT_SECRETS_LOCATION" == "x" ]; then
        WMAGENT_SECRETS_LOCATION=$HOME/WMAgent.secrets;
    fi
    if [ ! -e $WMAGENT_SECRETS_LOCATION ]; then
        echo "Password file: $WMAGENT_SECRETS_LOCATION does not exist"
        echo "Either set WMAGENT_SECRETS_LOCATION to a valid file or check that $HOME/WMAgent.secrets exists"
        exit 1;
    fi  
    
    local MATCH_MYSQL_USER=`cat $WMAGENT_SECRETS_LOCATION | grep MYSQL_USER | sed s/MYSQL_USER=//`
    local MATCH_MYSQL_PASS=`cat $WMAGENT_SECRETS_LOCATION | grep MYSQL_PASS | sed s/MYSQL_PASS=//`
    local MATCH_COUCH_USER=`cat $WMAGENT_SECRETS_LOCATION | grep COUCH_USER | sed s/COUCH_USER=//`
    local MATCH_COUCH_PASS=`cat $WMAGENT_SECRETS_LOCATION | grep COUCH_PASS | sed s/COUCH_PASS=//`
    local MATCH_COUCH_HOST=`cat $WMAGENT_SECRETS_LOCATION | grep COUCH_HOST | sed s/COUCH_HOST=//`
    local MATCH_COUCH_PORT=`cat $WMAGENT_SECRETS_LOCATION | grep COUCH_PORT | sed s/COUCH_PORT=//`
    local MATCH_REQMGR_HOSTNAME=`cat $WMAGENT_SECRETS_LOCATION | grep REQMGR_HOSTNAME | sed s/REQMGR_HOSTNAME=//`
    local MATCH_REQMGR_PORT=`cat $WMAGENT_SECRETS_LOCATION | grep REQMGR_PORT | sed s/REQMGR_PORT=//`
    local MATCH_GLOBAL_WORKQUEUE_HOSTNAME=`cat $WMAGENT_SECRETS_LOCATION | grep GLOBAL_WORKQUEUE_HOSTNAME | sed s/GLOBAL_WORKQUEUE_HOSTNAME=//`
    local MATCH_GLOBAL_WORKQUEUE_PORT=`cat $WMAGENT_SECRETS_LOCATION | grep GLOBAL_WORKQUEUE_PORT | sed s/GLOBAL_WORKQUEUE_PORT=//`
    local MATCH_LOCAL_WORKQUEUE_PORT=`cat $WMAGENT_SECRETS_LOCATION | grep LOCAL_WORKQUEUE_PORT | sed s/LOCAL_WORKQUEUE_PORT=//`
    
    if [ "x$MATCH_MYSQL_USER" == "x" ]; then
        MYSQL_USER=wmagentmysql;
    else
        MYSQL_USER=$MATCH_MYSQL_USER;
    fi
    if [ "x$MATCH_MYSQL_PASS" == "x" ]; then
        echo "Secrets file doesnt contain MYSQL_PASS";
        exit 1
    else
        MYSQL_PASS=$MATCH_MYSQL_PASS;
    fi
    if [ "x$MATCH_COUCH_USER" == "x" ]; then
        COUCH_USER=wmagentcouch;
    else
        COUCH_USER=$MATCH_COUCH_USER;
    fi
    if [ "x$MATCH_COUCH_PASS" == "x" ]; then
        echo "Secrets file doesnt contain COUCH_PASS";
        exit 1
    else
        COUCH_PASS=$MATCH_COUCH_PASS;
    fi
    if [ ! "x$MATCH_COUCH_PORT" == "x" ]; then
        COUCH_PORT=$MATCH_COUCH_PORT;
    fi
    if [ ! "x$MATCH_COUCH_HOST" == "x" ]; then
        COUCH_HOST=$MATCH_COUCH_HOST;
    fi
    if [ ! "x$MATCH_REQMGR_HOSTNAME" == "x" ]; then
        REQMGR_HOSTNAME=$MATCH_REQMGR_HOSTNAME;
    fi
    if [ ! "x$MATCH_REQMGR_PORT" == "x" ]; then
        REQMGR_PORT=$MATCH_REQMGR_PORT;
    fi
    if [ ! "x$MATCH_GLOBAL_WORKQUEUE_HOSTNAME" == "x" ]; then
        GLOBAL_WORKQUEUE_HOSTNAME=$MATCH_GLOBAL_WORKQUEUE_HOSTNAME;
    fi
    if [ ! "x$MATCH_GLOBAL_WORKQUEUE_PORT" == "x" ]; then
        GLOBAL_WORKQUEUE_PORT=$MATCH_GLOBAL_WORKQUEUE_PORT;
    fi
    if [ ! "x$MATCH_LOCAL_WORKQUEUE_PORT" == "x" ]; then
        LOCAL_WORKQUEUE_PORT=$MATCH_LOCAL_WORKQUEUE_PORT;
    fi
}


#
# Environment
#
. $WMCORE_DIR/app/etc/profile.d/init.sh
. $ROOT_DIR/couchdb/app/etc/profile.d/init.sh
. $ROOT_DIR/mysql/app/etc/profile.d/init.sh
. $WMCORE_DIR/py2-mysqldb/etc/profile.d/init.sh 
. $PROJ_DIR/cheetah/etc/profile.d/init.sh
. $PROJ_DIR/openid/etc/profile.d/init.sh
. $PROJ_DIR/cherrypy/etc/profile.d/init.sh
. $PROJ_DIR/py2-cjson/etc/profile.d/init.sh

export PATH=$PATH:$WMCORE_DIR/app/bin
export PYTHONPATH=$WMCORE_DIR/app/src/python:$PYTHONPATH
export PYTHONPATH=$PYTHONPATH:$WMCORE_DIR/app/test/python
export PYTHONPATH=$PYTHONPATH:$WMAGENT_DIR/dls-client/Client/lib
export PYTHONPATH=$PYTHONPATH:$WMAGENT_DIR/dbs-client/lib



#########################
#  MySQL                #
#########################

#
# first time startup routines for mysql
# pre gets called before startup, post called after it
init_mysql_db_pre(){
    echo "Installing the mysql database area..."
    mysql_install_db --datadir=$MYSQL_DIR/database 
    
}
init_mysql_db_post(){
    #install the WMAgent stuff
    echo "Installing the mysql schema..."
    load_secrets_file;
    local TIMEOUT=0;
    while [ ! -e $MYSQL_DIR/logs/mysql.sock ]
    do
        sleep 2;
        TIMEOUT=$(($TIMEOUT+2))
        if [ $TIMEOUT -ge 300 ]; then
            echo "Timeout waiting for mysqld to start."
            exit 1;
        fi
    done
    echo "Socket file exists, proceeding with schema install..."
    mysqladmin -u root password $MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock 

    touch $MYSQL_DIR/logs/.mysqlinitdb;
    
    local SQLUSER="CREATE USER '${MYSQL_USER}'@'localhost' IDENTIFIED BY '${MYSQL_PASS}';"
    local SQLGRANT="GRANT ALL ON *.* TO $MYSQL_USER@localhost WITH GRANT OPTION;"

    mysql -u root -p$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock --exec "$SQLUSER"
    mysql -u root -p$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock --exec "$SQLGRANT"
    mysql -u $MYSQL_USER -p$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock --exec "create database ${MYSQL_DATABASE}"    
    
}

status_of_mysql(){
    echo "+ Status of MySQL"
    if [ ! -e $MYSQL_DIR/logs/mysqld.pid ]; then
        echo "++ MySQL process file not found"
        return
    fi
    local MYSQL_PID=`cat $MYSQL_DIR/logs/mysqld.pid`
    kill -0 $MYSQL_PID;
    local MYSQL_STATUS=$?
    if [ $MYSQL_STATUS -eq 0 ]; then
        echo "++ MYSQL running with process: $MYSQL_PID";
    else
        echo "++ MYSQL process not running"
    fi
    
    echo "++" `mysqladmin -u root --password=$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock status`
}

#
# Main startup method for MySQL. 
# Checks for initialisation 
start_mysql(){
   echo "Starting mysql..."
   
   if [ $MYSQL_INIT_DONE -eq 0 ]; then
          echo "MySQL has not been initialised";
          init_mysql_db_pre;
   fi
   
   
   # Start mysqld to install the database schemas
   #  
   nohup mysqld_safe --defaults-extra-file=$MYSQL_DIR/config/my.cnf \
                     --datadir=$MYSQL_DIR/database \
                     --socket=$MYSQL_DIR/logs/mysql.sock \
                     --skip-networking --log-error=$MYSQL_DIR/logs/error.log \
                      --pid-file=$MYSQL_DIR/logs/mysqld.pid > /dev/null 2>&1 < /dev/null &
   if [ $MYSQL_INIT_DONE -eq 0 ]; then
        echo "MySQL has not been initialised";
        init_mysql_db_post;
   fi


}

#
# stop MySQL
#
stop_mysql(){
   echo "stopping mysql..."
   load_secrets_file;
   mysqladmin -u root -p$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock shutdown &
   wait $!
}

#
# Wipe out MySQL
# Will cause next start to recreate databases
clean_mysql(){
    echo "cleaning MySQL DB...";
    if [ -e $MYSQL_DIR/logs/mysql.pid ]; then stop_mysql; fi;
        
    /bin/rm -f $MYSQL_DIR/logs/.mysqlinitdb
    /bin/rm -f $MYSQL_DIR/logs/mysql.sock
    /bin/rm -f $MYSQL_DIR/logs/mysqld.pid
    /bin/rm -rf $MYSQL_DIR/database/*
}

#
# MySQL Prompt so that people can poke around in the db interactively
#
mysql_prompt(){
    load_secrets_file;
    mysql -u $MYSQL_USER -p$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock --database=${WMAGENT_DB};
    
}

#########################
#  CouchDB              #
#########################

#
# first time startup for couch: disable admin party and create user based on secrets file
#
init_couch_pre(){

    echo "Initialising CouchDB on $COUCH_HOST:$COUCH_PORT..."
    perl -p -i -e "s{bind_address = 0.0.0.0}{bind_address = $COUCH_HOST}g" $COUCHDB_DIR/config/local.ini
    perl -p -i -e "s{port = 5984}{port = $COUCH_PORT}g" $COUCHDB_DIR/config/local.ini
    perl -p -i -e "s{;admin = mysecretpassword}{$COUCH_USER = $COUCH_PASS}g" $COUCHDB_DIR/config/local.ini
}

init_couch_post(){
    touch $COUCHDB_DIR/logs/.couchinitdb    
}

status_of_couch(){
    echo "+ Couch Status:"
    if [ ! -e $COUCHDB_DIR/logs/couchdb.pid ]; then
        echo "++ Couch process file not found"
        return
    fi
    local COUCH_PID=`cat $COUCHDB_DIR/logs/couchdb.pid`
    kill -0 $COUCH_PID;
    local COUCH_STATUS=$?
    if [ $COUCH_STATUS -eq 0 ]; then
        echo "++ Couch running with process: $COUCH_PID";
    else
        echo "++ Couch process not running"
    fi
    echo "++" `curl -s $COUCH_HOST:$COUCH_PORT`
}

#
# Startup couch
#
start_couch(){
   load_secrets_file;
   echo "starting couch..."
   if [ $COUCH_INIT_DONE -eq 0 ]; then
       echo "CouchDB has not been initialised";
       init_couch_pre;
   fi
   couchdb -b -a $COUCHDB_DIR/config/local.ini \
           -p $COUCHDB_DIR/logs/couchdb.pid \
           -e $COUCHDB_DIR/logs/stderr.log \
           -o $COUCHDB_DIR/logs/stdout.log 
   if [ $COUCH_INIT_DONE -eq 0 ]; then
       init_couch_post;
   fi
 
 
}

#
# shutdown couch
#
stop_couch(){
   echo "stopping couch...";
   couchdb  -d  -p $COUCHDB_DIR/logs/couchdb.pid;
   
}

clean_couch(){
    echo "cleaning couch installation..."
    if [ -e $COUCHDB_DIR/logs/couchdb.pid ]; then stop_couch; fi;
    rm -f $COUCHDB_DIR/logs/.couchinitdb
    rm -rf $COUCHDB_DIR/database/*
    
}


#
# combined startup of all required services
#
start_services(){
    echo "Starting Services..."
    #start up the services required by the agent
    start_couch;
    start_mysql;
}

stop_services(){
    #shut down all services
    echo "Shutting down services..."
    stop_couch;
    stop_mysql;
}

##############################
#  WMAgent                   #
##############################

init_wmcore(){
    #echo "Initialising WMCore..."
    #cant think of too much to actually do here...
    #touch $WMCORE_DIR/configs/.wmcoreinit
    true
}

# generate the agent config from the basic template
init_wmagent(){
    load_secrets_file;
    if [ ! -e $WMAGENT_DIR/install ]; then
        mkdir $WMAGENT_DIR/install  
    fi
    wmagent-mod-config --input=$WMCORE_DIR/app/etc/WMAgentConfig.py \
                       --output=$WMAGENT_CONFIG \
                       --mysql_url=mysql://$MYSQL_USER:$MYSQL_PASS@localhost/$MYSQL_DATABASE \
                       --mysql_socket=$MYSQL_DIR/logs/mysql.sock \
                       --working_dir=$WMAGENT_DIR/install \
                       --couch_url=http://$COUCH_USER:$COUCH_PASS@$COUCH_HOST:$COUCH_PORT \
                       --global_workqueue_hostname=$GLOBAL_WORKQUEUE_HOSTNAME \
                       --global_workqueue_port=$GLOBAL_WORKQUEUE_PORT \
                       --local_workqueue_port=$LOCAL_WORKQUEUE_PORT
    wmcore-db-init --config $WMAGENT_CONFIG --create --modules=WMCore.WMBS,WMCore.Agent.Database,WMComponent.DBS3Buffer,WMCore.WorkQueue.Database,WMCore.BossAir,WMCore.ResourceControl;
    export WMAGENT_CONFIG

    wmagent-couchapp-init;
    
    touch $WMAGENT_DIR/config/.wmagentinit
    
}


init_reqmgr(){
    load_secrets_file;
    wmagent-mod-config --input=$WMCORE_DIR/app/etc/ReqMgrConfig.py \
                       --output=$WMAGENT_CONFIG \
                       --mysql_url=mysql://$MYSQL_USER:$MYSQL_PASS@localhost/$MYSQL_DATABASE \
                       --mysql_socket=$MYSQL_DIR/logs/mysql.sock \
                       --working_dir=$WMAGENT_DIR/install \
                       --couch_url=http://$COUCH_USER:$COUCH_PASS@$COUCH_HOST:$COUCH_PORT \
                       --reqmgr_port=$REQMGR_PORT \
                       --reqmgr_hostname=$REQMGR_HOSTNAME
    wmcore-db-init --config $WMAGENT_CONFIG --create --modules=WMCore.Agent.Database,WMCore.RequestManager.RequestDB
    export WMAGENT_CONFIG
    wmagent-couchapp-init;
    touch $WMAGENT_DIR/config/.wmagentinit
}

init_workqueue(){
    load_secrets_file;
    wmagent-mod-config --input=$WMCORE_DIR/app/etc/GlobalWorkQueueConfig.py \
                       --output=$WMAGENT_CONFIG \
                       --mysql_url=mysql://$MYSQL_USER:$MYSQL_PASS@localhost/$MYSQL_DATABASE \
                       --mysql_socket=$MYSQL_DIR/logs/mysql.sock \
                       --working_dir=$WMAGENT_DIR/install \
                       --couch_url=http://$COUCH_USER:$COUCH_PASS@$COUCH_HOST:$COUCH_PORT \
                       --reqmgr_hostname=$REQMGR_HOSTNAME \
                       --reqmgr_port=$REQMGR_PORT \
                       --global_workqueue_hostname=$GLOBAL_WORKQUEUE_HOSTNAME \
                       --global_workqueue_port=$GLOBAL_WORKQUEUE_PORT
    wmcore-db-init --config $WMAGENT_CONFIG --create --modules=WMCore.WorkQueue.Database,WMCore.Agent.Database
    export WMAGENT_CONFIG
    touch $WMAGENT_DIR/config/.wmagentinit
}

#
# initialise the agent based on the project installed
#
init_agent(){
    echo " + Initialising $PROJ_NAME"
    if [ $WMCORE_INIT_DONE -eq 0 ]; then
           #echo "WMCore has not been initialised";
           init_wmcore;
    fi
    if [ $WMAGENT_INIT_DONE -eq 0 ]; then
        echo " + $PROJ_NAME has not been initialised";
        case "$PROJ_NAME" in
           "reqmgr")
              init_reqmgr;;
           "workqueue")
              init_workqueue;;
           "wmagent")
              init_wmagent;;
        esac;
    else
        echo " + $PROJ_NAME has already been initialised"
    fi
    echo " + $PROJ_NAME Configuration file at $WMAGENT_CONFIG"
}

start_agent(){
    init_agent;
    export WMAGENT_CONFIG
    wmcoreD --start --config=$WMAGENT_CONFIG
}

stop_agent(){
    echo "Shutting down agent...";
    wmcoreD --shutdown --config=$WMAGENT_CONFIG;
}

status_of_agent(){
    wmcoreD --status --config=$WMAGENT_CONFIG
}


#
# revert agent back to pre initialised state & wipe out 
# everything currently in existence.
clean_agent(){
    load_secrets_file;
    echo "cleaning up agent installation"
    stop_agent;
    rm -rf  $WMAGENT_DIR/install ; 
    rm -f $WMAGENT_CONFIG;
    rm -f $WMAGENT_DIR/config/.wmagentinit;
    
    #
    # clean contents of mysql database
    # uses a drop/create of the db
    mysql -u $MYSQL_USER -p$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock --exec "drop database ${MYSQL_DATABASE}"
    mysql -u $MYSQL_USER -p$MYSQL_PASS --socket=$MYSQL_DIR/logs/mysql.sock --exec "create database ${MYSQL_DATABASE}"
    
}


status(){
    load_secrets_file;
    status_of_couch;
    status_of_mysql;
    status_of_agent;
    
    
}

clean_all(){
    clean_mysql;
    clean_couch;
    clean_agent;
}


execute_command(){
    shift;
    local RUNTHIS=$1
    local WMCORE_BIN_DIR=$WMCORE_DIR/app/bin
    echo $RUNTHIS
    if [ ! -e $WMCORE_BIN_DIR/$1 ]; then
        echo "$RUNTHIS is not a binary in WMCore/bin"
        exit 1
    fi
    shift;
    load_secrets_file;
    export WMAGENT_CONFIG
    echo "Executing $RUNTHIS $@ ..."
    $RUNTHIS $@;
}


help(){
    echo "there is no help, you are all alone";
}



#######################################################
# Main
#######################################################

case $1 in
  status)
    status ;;
  start-services)
    start_services;;
  stop-services)
    stop_services;;
  start-mysql)
    start_mysql;;
  stop-mysql)
    stop_mysql;;
  clean-mysql)
     clean_mysql;;
  mysql-prompt)
     mysql_prompt;;
  start-couch)
     start_couch;;
  stop-couch)
     stop_couch;;
  clean-couch)
     clean_couch;;
  init-agent)
     init_agent;;
  init-reqmgr)
     init_reqmgr;;
  init-workqueue)
     init_workqueue;;
  start-agent)
     start_agent;;
  stop-agent)
     stop_agent;;
  clean-agent)
     clean_agent;;
  clean-all)
     clean_all;;
  execute)
     execute_command $@;;
  help)
    help ;;
  version)
    echo "Management script for WMAgent. No idea what version" ;;
  * )
    echo "$0: unknown action '$1', please try '$0 help' or documentation." 1>&2
    exit 1 ;;
esac