from ConfigParser import ConfigParser

config = ConfigParser()
config.read('passwords.txt')

c = BuildmasterConfig = {}

from buildbot.buildslave import BuildSlave
# you would add other slaves here, build-slave is a hostname
c['slaves'] = []
c['slavePortnum'] = 9989

from buildbot.changes.mail import SyncmailMaildirSource
c['change_source'] = SyncmailMaildirSource('/Users/metson/.getmail/gmail-archive/wmcore')

from buildbot import scheduler
# Define a "quick" build (running all the unit tests and pylint) 60 seconds after a commit
quick = scheduler.Scheduler("On commit checks", None, 60, ["wmcore-tests"])

# Define a "full" build 5 mins after a commit (to catch typo's, missing files etc.)
full = scheduler.Scheduler("On commit build", None, 5*60, ["wmcore-full"])

# Define a nightly build at 3am
nightly = scheduler.Nightly('Nightly', ['wmcore-full'], hour=3, minute=0)

# Define a weekly build for Sunday evening
weekly = scheduler.Nightly('WeeklyBuild', ['wmcore-full'], dayOfWeek=6, hour=23, minute=00)
# Add in some Dependent builds, e.g. don't make RPM's if the builds fail etc.
#      see: http://buildbot.sourceforge.net/manual-0.7.3.html#Build-Dependencies
# If the weekly build works, try making an RPM in a private repository
#package = scheduler.Dependent("test package",
#                                    weekly, # upstream scheduler
#                                   ["make-rpm"])
# We'd deploy to VM here
#deploytovm = scheduler.Dependent("deploy to vm",
#                                   package,
#                                   ["make-tarball", "make-deb", "make-rpm"])
c['schedulers'] = [quick, full, nightly, weekly]

cvsroot = ":pserver:anonymous@cmscvs.cern.ch:/cvs_server/repositories/CMSSW"
cvsmodule = "COMP/WMCORE"
from buildbot.process import factory
from buildbot.steps.source import CVS
from buildbot.steps.shell import Compile
from buildbot.steps.python_twisted import Trial
from buildbot.steps.python import PyLint
from buildbot.steps.shell import ShellCommand

# That there isn't a UnitTest step is a bug imho
class UnitTests(ShellCommand):
	name = "unit tests"
	description = ["running unit tests"]
	descriptionDone = [name]

# Set up some standard steps
cvs_step = CVS(cvsroot=cvsroot, cvsmodule=cvsmodule, login=config.get('cvs', 'password'), mode="clobber", timeout=None)

lint_core = PyLint(command=["pylint", 
                            "--output-format=parseable", 
                            "--reports=n", 
                            "--rcfile=standards/.pylintrc", 
                            "src/python/WMCore/"], 
                   env={'PYTHONPATH': 'src/python/'})
lint_core.description = ['linting', 'WMCore']
lint_core.descriptionDone = ['WMCore', 'linted']

lint_comp = PyLint(command=["pylint", 
                            "--output-format=parseable", 
                            "--reports=n", 
                            "--rcfile=standards/.pylintrc", 
                            "src/python/WMComponent"], 
                   env={'PYTHONPATH': 'src/python/'})
                   
lint_comp.description = ['linting', 'WMComponents']
lint_core.descriptionDone = ['WMComponents', 'linted']

test = UnitTests(command=["python", "./setup.py", "test"])
build = Compile(command=["python", "./setup.py", "build"])

# Run a full test and build
f1 = factory.BuildFactory()
f1.addStep(cvs_step)
f1.addStep(test)
f1.addStep(lint_comp)
f1.addStep(lint_core)
f1.addStep(build)

# Just run unit and lint tests
f2 = factory.BuildFactory()
f2.addStep(cvs_step)
f2.addStep(test)
f2.addStep(lint_comp)
f2.addStep(lint_core)

# Slaves
# python 2.7
# mysql, sqlite, oracle
# "vandy-slv7", "vandy-slv8", "vandy-slv9",
# python 3.1 
# mysql, sqlite, oracle
# "vandy-slv10", "vandy-slv11", "vandy-slv12"

b1 = {'name': "wmcore-full",
      'slavenames': ["build-slave", "metson-brisui", "vandy-slv1", "vandy-slv2", 
                     "vandy-slv3", "vandy-slv4", "vandy-slv5", "vandy-slv6", 
                     "vandy-slv7", "vandy-slv8", "vandy-slv9", "vandy-slv10", 
                     "vandy-slv11", "vandy-slv12"],
      'builddir': "full",
      'factory': f1,
      }
b2 = {'name': "wmcore-tests",
      'slavenames': ["build-slave", "metson-brisui", "vandy-slv1", "vandy-slv2", 
                     "vandy-slv3", "vandy-slv4", "vandy-slv5", "vandy-slv6", 
                     "vandy-slv7", "vandy-slv8", "vandy-slv9", "vandy-slv10", 
                     "vandy-slv11", "vandy-slv12"],
      'builddir': "tests",
      'factory': f2,
      }

c['builders'] = [b1, b2]
c['status'] = []

from buildbot.status import bbtwitter
c['status'].append(bbtwitter.TwitterNotifier(config.get('twitter', 'username'), 
                                            config.get('twitter', 'password'), 
                                            mode="all"))

from buildbot.status.html import WebStatus
# Uncomment the following when impatient....
#
from buildbot.status.web.auth import BasicAuth
users = [config.get('user', 'username'), config.get('user', 'password')]
c['status'].append(WebStatus(http_port=8010, allowForce=True, auth=BasicAuth(users)))
# Comment the following when impatient....
#
#c['status'].append(WebStatus(http_port=8010))


c['projectName'] = "WMCORE"
c['projectURL'] = "https://twiki.cern.ch/twiki//bin/view/CMS/WMCore"
c['buildbotURL'] = "http://plague.phy.bris.ac.uk:8010/"
