#!/usr/bin/env python
"""
_requestDbAdmin_

"""

import sys
import getopt
import os

import WMCore.RequestManager.RequestDB.Interface.User.Registration as Registration
import WMCore.RequestManager.RequestDB.Interface.Group.Information as GroupInfo
import WMCore.RequestManager.RequestDB.Interface.Admin.UserManagement as UserAdmin
import WMCore.RequestManager.RequestDB.Interface.Admin.GroupManagement as GroupAdmin
import WMCore.RequestManager.RequestDB.Interface.Admin.RequestManagement as RequestAdmin
import WMCore.RequestManager.RequestDB.Interface.Admin.SoftwareManagement as SoftwareAdmin
import WMCore.RequestManager.RequestDB.Interface.Admin.ProdManagement as ProdManagement
from WMCore.HTTPFrontEnd.RequestManager.ReqMgrWebTools import allSoftwareVersions
from WMCore.WMInit import WMInit
from WMCore.Configuration import loadConfigurationFile
import logging

valid = 'g:u:v:t:c:'

usage = \
"""
requestDBAdmin [-c config] (add|list|delete) [-g <group|all>] [-u <user|all>] [-v <cmssw version|all>] [-t <prod team|all>]
"""

user = None
group = None
version = None
team = None

if len(sys.argv) < 2:
    print usage
    sys.exit(1)

try:
    opts, args = getopt.getopt(sys.argv[2:], valid)
except getopt.GetoptError, ex:
    print usage
    print str(ex)
    sys.exit(1)

# load the configuration
configPath = None
for (opt, arg) in opts:
    if opt == "-c":
        configPath = arg

if not configPath:
    configPath = os.environ.get("WMAGENT_CONFIG", None)

if not configPath:
    print "Please specify a config by either setting the WMAGENT_CONFIG"
    print "environment variable or with the -c command line option."
    sys.exit(1)

config = loadConfigurationFile(configPath)
        
if not hasattr(config, "CoreDatabase"):
    print "Your config is missing the CoreDatabase section."
    sys.exit(1) 

socketLoc = getattr(config.CoreDatabase, "socket", None)
connectUrl = getattr(config.CoreDatabase, "connectUrl", None)
(dialect, junk) = connectUrl.split(":", 1)

wmInit = WMInit()
wmInit.setDatabaseConnection(dbConfig = connectUrl, dialect = dialect,
                             socketLoc = socketLoc)
wmInit.setLogging(logLevel = logging.DEBUG)


def doAdd():
    if group != None:
        if not GroupInfo.groupExists(group):
            GroupAdmin.addGroup(group)
    if user != None:
        if not Registration.isRegistered(user):
            emailAddress = raw_input("E-mail address: ")
            Registration.registerUser(user, emailAddress)
    # if we get both, add user to group
    if group != None and user != None:
        GroupAdmin.addUserToGroup(user, group) 
    if version != None:
        if version == "all":
            for v in allSoftwareVersions():
                SoftwareAdmin.addSoftware(v)
        else:
            SoftwareAdmin.addSoftware(version)
    if team != None:
        ProdManagement.addTeam(team)

def doList():
    if len(opts) == 0:
       # Do them all
       print "GROUPS"
       groups = GroupInfo.listGroups()
       for gr in groups:
          print gr
          groupUsers = GroupInfo.usersInGroup(gr)
          for groupUser in groupUsers:
              print '-', str(groupUser)
       print "SOFTWARE"
       print SoftwareAdmin.listSoftware()
    if group != None:
        if group == "all":
            print GroupInfo.listGroups() 
        else:
            if not GroupInfo.groupExists(group):
                print "No such group found"
            else:
                print "Members of group " + group + ':' + str(GroupInfo.usersInGroup(group))
    if user != None:
        if not Registration.isRegistered(user):
            print "User " + user + ' not found'
        else:
            print "User " + user + ' is a member of groups ' + str(GroupInfo.groupsForUser(user).keys())
    if version != None:
       print SoftwareAdmin.listSoftware()
    if team != None:
       print ProdManagement.listTeams()

def doDelete():
    if group and user:
        GroupAdmin.removeUserFromGroup(user, group)
    elif group:
        GroupAdmin.deleteGroup(arg)
    elif user:
        UserAdmin.deleteUser(arg)
    if version != None:
        SoftwareAdmin.removeSoftware(arg)
    if team != None:
        ProdManagement.removeTeam(arg)

for opt, arg in opts:
    if opt == "-u":
        user = arg
    if opt == "-g":
        group = arg
    if opt == "-v":
        version = arg
    if opt == "-t":
        team = arg

if sys.argv[1] == 'add':
    doAdd()
elif sys.argv[1] == 'list':
    doList()
elif sys.argv[1] == 'delete':
    doDelete()
else:
    print usage
    sys.exit(1)

