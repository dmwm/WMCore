<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<title>Job Splitting Parameters for $requestName</title>
</head>
<body>

#for $taskName in $taskNames
<div id="$taskName"></div>
#end for

<script type="text/javascript">

function generateInputRow(label, key, d) {
  return '<tr>' + generateInput(label, key, d) +'</tr>';
}

function generateInput(label, key, d) {
  var procStr = '<tr><td>' + label + '</td><td><input type="text" name="' + key + '"';
  if (key in d) {
    procStr += ' value="' + d[key] + '"';
  }
  procStr += '></input></td>\n';
  return procStr;
}

function generateInputRow(label, key, d) {
  return '<tr>' + generateInput(label, key, d) +'</tr>';
}

function submitButton() {
  return '<input type="submit" value="Update Parameters">\n';
}

function generateProcessing(splitAlgo, splitParams) {
  var procStr = "<table><tr><td>";
  procStr += '<input type="radio" name="splittingAlgo" value="FileBased"';

  if (splitAlgo == "FileBased") {
    procStr += " checked";
  }

  procStr += ">File Based</input></td>";
  procStr += generateInput("Files per job:", "files_per_job", splitParams);
  procStr += "<td></td></tr><tr><td>";
  procStr += '<input type="radio" name="splittingAlgo" value="LumiBased"';

  if (splitAlgo == "LumiBased") {
    procStr += " checked";
  }

  procStr += ">Lumi Based</input></td>\n";
  procStr += generateInput("Lumis per job:", "lumis_per_job", splitParams);
  procStr += '<td>Split files between jobs: <select name="split_files_between_job">';
  if ("split_files_between_job" in splitParams) {
    if (splitParams["split_files_between_job"] == "True") {
      procStr += "<option selected>True</option><option>False</option>\n";
    } else {
      procStr += "<option>True</option><option selected>False</option>\n";
    }
  } else {
    procStr += "<option>True</option><option>False</option>\n";
  }
 
  procStr += "</select></input></td></tr>\n";
  procStr += '<tr><td><input type="radio" name="splittingAlgo" value="EventBased"';

  if (splitAlgo == "EventBased") {
    procStr += " checked";
  }

  procStr += ">Event Based</input></td>\n";
  procStr += generateInput("Events per job:", "events_per_job", splitParams);
  procStr += "<td></td></tr>\n"
  procStr += generateInputRow("Max execution time (seconds):", "timeout", splitParams);
  procStr += "</table>\n";
  procStr += submitButton();
  return procStr;
}  

function generateSkim(splitAlgo, splitParams) {
  var procStr = "<table><tr><td>";
  procStr += '<input type="radio" name="splittingAlgo" value="FileBased"';

  if (splitAlgo == "FileBased") {
    procStr += " checked";
  }

  procStr += ">File Based</input></td>\n";
  procStr += '<td>Files per job:</td><td><input type="text" name="files_per_job"';

  if ("files_per_job" in splitParams && splitAlgo == "FileBased") {
    procStr += " value=" + splitParams["files_per_job"];
  }

  procStr += '></td></input><td></td></tr><tr><td>';
  procStr += '<input type="radio" name="splittingAlgo" value="TwoFileBased"';

  if (splitAlgo == "TwoFileBased") {
    procStr += " checked";
  }

  procStr += ">Two File Based</input></td>\n";
  procStr += generateInput("Files per job:", "two_files_per_job", splitParams);
  procStr += "</tr>";
  procStr += generateInputRow("Max execution time (seconds):", "timeout", splitParams);
  procStr += "</table>\n";
  procStr += submitButton();
  return procStr;
}

function generateCleanupLogCollect(splitParams) {
  var procStr = '<input type="hidden" name="splittingAlgo" value="FileBased"></input>\n';
  procStr += "<table>"
  procStr += generateInputRow("Files per job:", "files_per_job", splitParams);
  procStr += generateInputRow("Max execution time (seconds):", "timeout", splitParams);
  procStr += "</table>\n";
  procStr += submitButton();
  return procStr;
}

function generateMerge(splitAlgo, splitParams) {
  var frmStr = '<table><tr><td>Merge algorithm:</td>'
  frmStr += '<td><select name="splittingAlgo"><option>' + splitAlgo + '</option></select></td></tr>\n';
  frmStr += generateInputRow("Min merge size:", "min_merge_size", splitParams);
  frmStr += generateInputRow("Max merge size:", "max_merge_size", splitParams);
  frmStr += generateInputRow("Max merge events:", "max_merge_events", splitParams);
  frmStr += generateInputRow("Max execution time (seconds):", "timeout", splitParams);
  frmStr += "</table>\n";
  frmStr +=  submitButton();
  return frmStr;
}

function generateForm(taskName, splitAlgo, splitParams, taskType) {
  var frmStr = '<form action="../handleSplittingPage" method="POST">\n';
  frmStr += '<input type="hidden" name="requestName" VALUE="$requestName"></input>\n'; 
  frmStr += '<input type="hidden" name="splittingTask" VALUE="' + taskName + '"></input>\n'; 
  frmStr += "<b>" + taskName + ":</b><br>\n";

  if (taskType == "Processing") {
    frmStr += generateProcessing(splitAlgo, splitParams);
  } else if (taskType == "LogCollect" || taskType == "Cleanup") {
    frmStr += generateCleanupLogCollect(splitParams);
  } else if (taskType == "Merge") {
    frmStr += generateMerge(splitAlgo, splitParams);
  } else if (taskType == "Skim") {
    frmStr += generateSkim(splitAlgo, splitParams);
  }

  frmStr += "</form>";
  return frmStr;
}

#for $task in $taskInfo
document.getElementById("$task.taskName").innerHTML = generateForm("$task.taskName", "$task.splitAlgo", $task.splitParams, "$task.taskType");
#end for

</script>
</form>

</body></html>

