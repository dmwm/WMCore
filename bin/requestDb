#!/usr/bin/env python

""" requestDb """
import sys
import getopt
import os
import WMCore.RequestManager.RequestDB.Interface.Request.ListRequests as ListRequests
import WMCore.RequestManager.RequestDB.Interface.Request.GetRequest as GetRequest
import WMCore.RequestManager.RequestDB.Interface.Admin.RequestManagement as RequestAdmin
import WMCore.RequestManager.RequestDB.Interface.User.Requests as UserRequests
from WMCore.WMInit import WMInit
from WMCore.Configuration import loadConfigurationFile
import logging




valid = 's:g:t:p:u:c:'

usage = \
"""
requestDb (list|delete)  [-c <config>] [-s <status>] [-g <group>] [-t <team>] [-p <prodmgr>] [-u <user>]
"""

group = None
team = None
status = None
prodMgr = None
user = None

if len(sys.argv) < 2:
    print usage
    sys.exit(1)

try:
    opts, args = getopt.getopt(sys.argv[2:], valid)
except getopt.GetoptError, ex:
    print usage
    print str(ex)
    sys.exit(1)

# load the configuration
configPath = None
for (opt, arg) in opts:
    if opt == "-c":
        configPath = arg

if not configPath:
    configPath = os.environ.get("WMAGENT_CONFIG", None)

if not configPath:
    print "Please specify a config by either setting the WMAGENT_CONFIG"
    print "environment variable or with the -c command line option."
    sys.exit(1)

config = loadConfigurationFile(configPath)

if not hasattr(config, "CoreDatabase"):
    print "Your config is missing the CoreDatabase section."
    sys.exit(1)

socketLoc = getattr(config.CoreDatabase, "socket", None)
connectUrl = getattr(config.CoreDatabase, "connectUrl", None)
(dialect, junk) = connectUrl.split(":", 1)
print socketLoc, connectUrl ,dialect, junk
wmInit = WMInit()
wmInit.setDatabaseConnection(dbConfig = connectUrl, dialect = dialect,
                             socketLoc = socketLoc)
wmInit.setLogging(logLevel = logging.DEBUG)

for opt, arg in opts:
    if opt == "-s":
        status = arg
    if opt == "-g":
        group = arg
    if opt == "-t":
        team = arg
    if opt == "-p":
        prodMgr = arg
    if opt == "-u":
        user = arg

def getList():
    if not (user or status or group or prodMgr):
        return ListRequests.listRequests()
    # These methods only return IDs
    ids  = []
    if status and not (user or group or team or prodMgr):
        ids.extend(ListRequests.listRequestsByStatus(status))
    else:
        if user:
            ids = [GetRequest.requestID(name) for name in UserRequests.listRequests(user)]
        elif group:
            ids = ListRequests.listRequestsForGroup(group, status).values()
        elif team:
            ids = ListRequests.listRequestsByTeam(team, status).values()
        elif prodMgr:
            ids = ListRequests.listRequestsByProdMgr(prodMgr).values()
    print str(ids)
    return [GetRequest.getRequest(id) for id in ids]

def doDelete():
    """ Can either delete by user, or delete by request, or delete all """
    requests = getList()
    for request in requests:
        if user or args == ['all'] or request['RequestName'] in args:
            print "Deleting " + request['RequestName']
            RequestAdmin.deleteRequest(request["RequestID"])

if sys.argv[1] == 'list':
    for request in getList():
        print str(request)
elif sys.argv[1] == 'delete':
    doDelete()
else:
    print usage
    sys.exit(1)


