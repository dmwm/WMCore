<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<title>Job Splitting Parameters for $requestName</title>
<meta http-equiv="Pragma" content="no-cache">
</head>
<body>

#for $taskName in $taskNames
<div id="$taskName"></div>
#end for

<script type="text/javascript">

function postUpdate(formName) {
  var taskLabelDiv = document.getElementById("label" + formName);
  taskLabelDiv.innerHTML = " <font color=red>Updating...</font>"

  updatedForm = document.forms[formName];
  var paramStr = "";
  var paramCount = 0;
  for (var elementIndex in updatedForm.elements) {
    var formElement = updatedForm.elements[elementIndex];
    if (formElement["type"] == "radio" && !formElement["checked"]) {
      continue;
    } else if (formElement["type"] != "text" && formElement["type"] != "select-one" &&
               formElement["type"] != "hidden" && formElement["type"] != "radio") {
      continue;
    };
    /* firefox in Mac and Windows create the input with the name - hack*/
    if (isNaN(elementIndex)) continue;

    paramCount += 1;
    paramStr += updatedForm.elements[elementIndex].name + "=";
    paramStr += updatedForm.elements[elementIndex].value + "&";
  };

  var http = new XMLHttpRequest();
  http.open("POST", "../handleSplittingPage", true);
  http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  http.setRequestHeader("Content-length", paramStr.length);
  http.setRequestHeader("Connection", "close");

  http.onreadystatechange = function() {
    if(http.readyState == 4 && http.status == 200) {
      var taskLabelDiv = document.getElementById("label" + formName);
      taskLabelDiv.innerHTML = " <font color=red>Updated!</font>"
    }
  }
  http.send(paramStr);
}

function generateInputRow(label, key, d) {
  return '<tr>' + generateInput(label, key, d) +'</tr>';
}

function generateInput(label, key, d, workloadKey) {
  var procStr = '<td>' + label + '</td><td><input type="text" name="' + key + '"';
  if (workloadKey && workloadKey in d){
    procStr += ' value="' + d[workloadKey] + '"';
  }
  else if (key in d) {
    procStr += ' value="' + d[key] + '"';
  }
  procStr += '></input></td>\n';
  return procStr;
}

function submitButton(formID) {
  return '<input type="button" value="Update Parameters" onclick=postUpdate("' + formID + '");>\n';
}

function generateProcessing(splitAlgo, splitParams) {
  var procStr = "<table><tr><td>";
  procStr += '<input type="radio" name="splittingAlgo" value="FileBased"';

  if (splitAlgo == "FileBased") {
    procStr += " checked";
  }

  procStr += ">File Based</input></td>";
  procStr += generateInput("Files per job:", "files_per_job", splitParams);
  procStr += "<td></td></tr><tr><td>";
  procStr += '<input type="radio" name="splittingAlgo" value="LumiBased"';

  if (splitAlgo == "LumiBased") {
    procStr += " checked";
  }

  procStr += ">Lumi Based</input></td>\n";
  procStr += generateInput("Lumis per job:", "lumis_per_job", splitParams);
  procStr += '<td>Split files between jobs: <select name="halt_job_on_file_boundaries">';
  if ("halt_job_on_file_boundaries" in splitParams) {
    if (splitParams["halt_job_on_file_boundaries"] == true) {
      procStr += "<option selected>True</option><option>False</option>\n";
    } else {
      procStr += "<option>True</option><option selected>False</option>\n";
    }
  } else {
    procStr += "<option selected>True</option><option>False</option>\n";
  }

  procStr += "</select></input></td></tr>\n";
  procStr += '<tr><td><input type="radio" name="splittingAlgo" value="EventAwareLumiBased"';

  if (splitAlgo == "EventAwareLumiBased") {
    procStr += " checked";
  }
  procStr += ">Event Aware Lumi Based</input></td>\n";
  procStr += generateInput("Optimal events per job:", "avg_events_per_job", splitParams, "events_per_job");
  procStr += generateInput("Max events in single lumi:", "max_events_per_lumi", splitParams);
  procStr += '<td>Split files between jobs: <select name="halt_job_on_file_boundaries_event_aware">';
  if ("halt_job_on_file_boundaries" in splitParams) {
    if (splitParams["halt_job_on_file_boundaries"] == true) {
      procStr += "<option selected>True</option><option>False</option>\n";
    } else {
      procStr += "<option>True</option><option selected>False</option>\n";
    }
  } else {
    procStr += "<option selected>True</option><option>False</option>\n";
  }

  procStr += "</select></input></td></tr>\n";
  procStr += '<tr><td><input type="radio" name="splittingAlgo" value="EventBased"';

  if (splitAlgo == "EventBased") {
    procStr += " checked";
  }

  procStr += ">Event Based</input></td>\n";
  procStr += generateInput("Events per job:", "events_per_job", splitParams);
  procStr += "<td></td></tr>\n"

  procStr += '<tr><td>Include parents: <select name="include_parents">';
  if ("include_parents" in splitParams) {
    if (splitParams["include_parents"] == true) {
      procStr += "<option selected>True</option><option>False</option>\n";
    } else {
      procStr += "<option>True</option><option selected>False</option>\n";
    }
  } else {
    procStr += "<option>True</option><option selected>False</option>\n";
  }

  procStr += "</td></tr></table>\n";
  return procStr;
}  

function generateSkim(splitAlgo, splitParams) {
  var procStr = "<table><tr><td>";
  procStr += '<input type="radio" name="splittingAlgo" value="FileBased"';

  if (splitAlgo == "FileBased") {
    procStr += " checked";
  }

  procStr += ">File Based</input></td>\n";
  procStr += '<td>Files per job:</td><td><input type="text" name="files_per_job"';

  if ("files_per_job" in splitParams && splitAlgo == "FileBased") {
    procStr += " value=" + splitParams["files_per_job"];
  }

  procStr += '></td></input><td></td></tr><tr><td>';
  procStr += '<input type="radio" name="splittingAlgo" value="TwoFileBased"';

  if (splitAlgo == "TwoFileBased") {
    procStr += " checked";
  }

  procStr += ">Two File Based</input></td>\n";
  procStr += generateInput("Files per job:", "two_files_per_job", splitParams);
  procStr += "</tr>";
  procStr += "</table>\n";
  return procStr;
}

function generateCleanupLogCollect(splitParams) {
  var procStr = '<input type="hidden" name="splittingAlgo" value="FileBased"></input>\n';
  procStr += "<table>"
  procStr += generateInputRow("Files per job:", "files_per_job", splitParams);
  procStr += "</table>\n";
  return procStr;
}

function generateMerge(splitAlgo, splitParams) {
  var frmStr = '<table><tr><td>Merge algorithm:</td>'
  frmStr += '<td><select name="splittingAlgo"><option>' + splitAlgo + '</option></select></td></tr>\n';
  frmStr += generateInputRow("Min merge size:", "min_merge_size", splitParams);
  frmStr += generateInputRow("Max merge size:", "max_merge_size", splitParams);
  frmStr += generateInputRow("Max merge events:", "max_merge_events", splitParams);
  frmStr += generateInputRow("Max wait time (seconds):", "max_wait_time", splitParams);
  frmStr += "</table>\n";
  return frmStr;
}

function generateProduction(splitAlgo, splitParams) {
  var procStr = '<input type="hidden" name="splittingAlgo" value="EventBased"></input>\n';
  procStr += "<table>"
  procStr += generateInputRow("Events per job:", "events_per_job", splitParams);
  if ("events_per_lumi" in splitParams) {
    procStr += generateInputRow("Events per lumi:", "events_per_lumi", splitParams);
  }
  if ("lheInputFiles" in splitParams) {
    procStr += '<tr><td>Processing LHE files?: <select name="lheInputFiles">';
      if (splitParams["lheInputFiles"] == true) {
        procStr += "<option selected>True</option><option>False</option>\n";
      } else {
        procStr += "<option>True</option><option selected>False</option>\n";
      }
      procStr += '</td></tr>\n'
  }
  procStr += "</table>\n";
  return procStr;
}

function generateHarvesting(splitAlgo, splitParams) {
  var procStr = '<input type="hidden" name="splittingAlgo" value="Harvest"></input>\n';
  procStr += "<table>"
  procStr += generateInputRow("Periodic harvesting frequency:", "periodic_harvest_interval", splitParams);
  procStr += "</table>\n";
  return procStr;
}

function generateForm(taskName, splitAlgo, splitParams, taskType) {
  var frmStr = '<form name="' + taskName + '" action="../handleSplittingPage" method="POST">\n';
  frmStr += '<input type="hidden" name="requestName" VALUE="$requestName"></input>\n'; 
  frmStr += '<input type="hidden" name="splittingTask" VALUE="' + taskName + '"></input>\n'; 
  frmStr += '<b>' + taskName + ':</b><b id="label' + taskName + '"></b><br>\n';

  if (taskType == "Processing" || taskType == "MultiProcessing") {
    frmStr += generateProcessing(splitAlgo, splitParams);
  } else if (taskType == "LogCollect" || taskType == "Cleanup") {
    frmStr += generateCleanupLogCollect(splitParams);
  } else if (taskType == "Merge") {
    frmStr += generateMerge(splitAlgo, splitParams);
  } else if (taskType == "Skim") {
    frmStr += generateSkim(splitAlgo, splitParams);
  } else if (taskType == "Production" || taskType == "MultiProduction") {
    frmStr += generateProduction(splitAlgo, splitParams);
  } else if (taskType == "Harvesting") {
    frmStr += generateHarvesting(splitAlgo, splitParams);
  }

  frmStr += submitButton(taskName);
  frmStr += "</form><br>";
  return frmStr;
}

#for $task in $taskInfo
document.getElementById("$task.taskName").innerHTML = generateForm("$task.taskName", "$task.splitAlgo", $task.splitParams, "$task.taskType");
#end for

</script>
</form>

</body></html>

