'''
Created on May 26, 2009

@author: meloam
'''
import WMCore.Cache.ConfigCache as ConfigCache
import unittest
import tempfile
import os
import md5
from WMCore.Database.CMSCouch import *

testDocument1 = \
"""#!/usr/bin/env python
# TESTDOCUMENT1
#
# StepSpace Init module for Step
# Autogenerated by WMCore.WMSpec.Steps.Builder

__all__ = []

from WMCore.WMRuntime.Bootstrap import establishStepSpace
def _Locator():
    pass
args = {}
""" 

testDocument2 = \
"""#!/usr/bin/env python
# TESTDOCUMENT2
#
# StepSpace Init module for Step
# Autogenerated by WMCore.WMSpec.Steps.Builder

__all__ = []
# this document should be different
from WMCore.WMRuntime.Bootstrap import establishStepSpace
def _Locator():
    pass
args = {}
"""

class Test(unittest.TestCase):
    def setUp(self):
        """
        _setUp_

        Initialize the config cache database and create some test configs.
        """
        couchurl = os.getenv("COUCHURL")
        self.cache = ConfigCache.WMConfigCache("testdb2", couchurl)
        
        # make some temp config files to test with
        (self.fileobj1, self.filename1) = tempfile.mkstemp()
        self.firstmd5 = md5.new(testDocument1).hexdigest()
        os.write(self.fileobj1, testDocument1)
        os.close(self.fileobj1)
        
        # second config
        self.fileobj2, self.filename2 = tempfile.mkstemp()
        self.secondmd5 = md5.new(testDocument2).hexdigest()
        os.write(self.fileobj2, testDocument2)
        os.close(self.fileobj2)
        return

    def tearDown(self):
        """
        _tearDown_

        Remove the test files and the couch database.
        """
        os.remove(self.filename1)
        os.remove(self.filename2)
        self.cache.deleteDatabase()
        return
        
    def testSerialize(self):
        """
        _testSerialize_
        
        Verifies that serialization works okay. Will throw an exception
        otherwise.
        """
        newid1, newrev1 = self.cache.addConfig(self.filename1)
        testString1 = self.cache.getConfigByDocID(newid1)
        return
    
    def testDuplicate(self):
        """
        _testDuplicate_
        
        Adding duplicate configs. The class should just add it once to the DB
        and pass the old value keys/revs back.
        """
        newid1, newrev1 = self.cache.addConfig(self.filename1)
        newid2, newrev2 = self.cache.addConfig(self.filename1)
        otherid,otherrev = self.cache.addConfig(self.filename2)
        self.assertEqual(newid1, newid2)
        self.assertEqual(newrev1, newrev2)
        return
    
    def testOriginal(self):
        """
        _testOriginal_

        Test the ability to add unpickled configs to the config cache.
        """
        newid1, newrev1 = self.cache.addConfig(self.filename1)
        newid1, newrev1 = self.cache.addOriginalConfig(newid1, newrev1,
                                                       self.filename2)
        testString1 = self.cache.getConfigByDocID(newid1)
        testString2 = self.cache.getOriginalConfigByDocID(newid1)

        self.assertEqual(testString1, testDocument1)
        self.assertEqual(testString2, testDocument2)
        return

    def testNonExistant(self):
        """
        _testNonExistant_

        Verify that the getConfigByMD5() and getConfigByDocID() method raise the
        correct exceptions when they are passed bad IDs.
        """
        self.assertRaises(IndexError, self.cache.getConfigByMD5, "nonexistantid")
        self.assertRaises(CouchNotFoundError, self.cache.getConfigByDocID, "nonexistantid")
        return
        
    def testTweakFile(self):
        """
        _testTweakFile_

        Verify that we can correctly add tweak files to the cache.
        """
        newid1, newrev1 = self.cache.addConfig(self.filename1)
        newid1, newrev1 = self.cache.addTweakFile(newid1, newrev1,
                                                  self.filename2)
        testString1 = self.cache.getConfigByDocID(newid1)
        testString2 = self.cache.getTweakFileByDocID(newid1)

        self.assertEqual(testString1, testDocument1)
        self.assertEqual(testString2, testDocument2)
        return
        
    def testAllFiles(self):
        """
        _testAllFiles_

        Verify that we can add a pickled condig, tweak file and an original
        config.
        """
        newid1, newrev1 = self.cache.addConfig(self.filename1)
        newid1, newrev1 = self.cache.addTweakFile(newid1, newrev1,
                                                  self.filename2)
        newid1, newrev1 = self.cache.addOriginalConfig(newid1, newrev1,
                                                       self.filename2)

        testString1 = self.cache.getConfigByDocID(newid1)
        testString2 = self.cache.getTweakFileByDocID(newid1)
        testString3 = self.cache.getOriginalConfigByDocID(newid1)

        self.assertEqual(testString1, testDocument1)
        self.assertEqual(testString2, testDocument2)
        self.assertEqual(testString3, testDocument2)
        return
    
    def testAdd(self):
        """
        _testAdd_
        
        Simple test to make sure we can roundtrip data properly.
        """
        self.cache.addConfig(self.filename2)
        testString = self.cache.getConfigByMD5(self.secondmd5)
        self.assertEqual(testString, testDocument2)
        
    def testChangeHash(self):
        """
        _testChangeHash_
        
        Make sure that we can set and retrieve data by their pset_hashes.
        """
        newid1, newrev1 = self.cache.addConfig(self.filename1)
        self.cache.modifyHash(newid1, "demohash")
        testString = self.cache.getConfigByHash("demohash")
        self.assertEqual(testString, testDocument1)
        return
        
    def testAddDelBarrage(self):
        """
        _testAddDelBarrage_
        
        Ddd and delete files repeatedly.
        """
        filehandle = open('test-pset1.py', 'rb')
        sampletext = filehandle.read()
        for i in range(10):
            # made the slightly modified file so the md5 sums dont overlap
            (tmpobj, tmpname) = tempfile.mkstemp()
            newtext = sampletext + ("%s" % i)
            ourmd5 = md5.new( newtext ).hexdigest()
            os.write( tmpobj, newtext )
            os.close( tmpobj )
            
            # add the document to the database
            newid, newrev = self.cache.addConfig( tmpname )
            self.cache.modifyHash(newid, 'demohash'  + ("%s" % i))
            testhashget = self.cache.getConfigByHash('demohash' + ("%s" % i))
            testidget   = self.cache.getConfigByDocID(newid)
            testmd5get  = self.cache.getConfigByMD5( ourmd5 )
            
            # assert we got the same thing each time
            self.assertEqual( newtext, testhashget )
            self.assertEqual( newtext, testidget )
            self.assertEqual( newtext, testmd5get )
            
            # now, delete the document
            self.cache.deleteConfig( newid )
            self.assertRaises( CouchNotFoundError, self.cache.getConfigByDocID, newid )
            
            os.remove( tmpname )
        
if __name__ == "__main__":
    unittest.main()
