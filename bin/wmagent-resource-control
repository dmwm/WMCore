#!/usr/bin/env python
#pylint: disable-msg=C0103
"""
wmagent-resource-control

Utility script for manipulating resource control.
"""

import sys

from optparse import OptionParser

from WMCore.WMInit import connectToDB
from WMCore.Configuration import loadConfigurationFile
from WMCore.ResourceControl.ResourceControl import ResourceControl
from WMCore.Services.SiteDB.SiteDB import SiteDBJSON

def createOptionParser():
    """
    _createOptionParser_

    Create an option parser that knows about all the options for manipulating
    and accessing resource control.
    """
    myOptParser = OptionParser()
    myOptParser.add_option("-p", "--thresholds", dest = "printThresholds",
                           default = False, action = "store_true",
                           help = "Print out all known thresholds and site information.")
    myOptParser.add_option("--add-T1s", dest = "addT1s", default = False, action = "store_true",
                           help = "Add all of the CMS T1 sites to resource control.")
    myOptParser.add_option("--add-T2s", dest = "addT2s", default = False, action = "store_true",
                           help = "Add all of the CMS T2 sites to resource control.")
    myOptParser.add_option("--add-all-sites", dest = "addAllSites", default = False,
                           action = "store_true",
                           help = "Add all of the CMS sites to resource control.")
    myOptParser.add_option("--site-name", dest = "siteName",
                           help = "Specify the unique name of the location")
    myOptParser.add_option("--site-slots", dest = "jobSlots",
                           help = "Specify the maximum number of slots to use at the site")
    myOptParser.add_option("--ce-name", dest = "ceName",
                           help = "Specify the CEName for the site")
    myOptParser.add_option("--se-name", dest = "seName",
                           help = "Specify the SEName for the site")
    myOptParser.add_option("--cms-name", dest = "cmsName",
                           help = "Specify the name of the site in SiteDB")
    myOptParser.add_option("--task-type", dest = "taskType",
                           help = "Specify the name of the task to add/modify")
    myOptParser.add_option("--task-slots", dest = "maxSlots",
                           help = "Specify the maximum number of slots for the task type")
    myOptParser.add_option("--priority", dest = "priority", default = None,
                           help = "Specify the priority of the threshold at the site (higher is better)")
    myOptParser.add_option("--plugin", dest = "plugin",
                           help = "Specify submit plugin to use for specific site")

    return myOptParser

def getCMSSiteInfo(pattern):
    """
    _getCMSSiteInfo_

    Query SiteDB for the site and SE names matching the pattern.  Return a
    dictionary keyed by site name.
    """
    nameSEMapping = {}
    print "Querying SiteDB for site information..."
    
    siteDB = SiteDBJSON()
    for seName in siteDB.cmsNametoList(pattern, "SE", "result.json"):
        cmsName = siteDB.seToCMSName(seName)
        nameSEMapping[cmsName] = seName

    return nameSEMapping

def addSites(resourceControl, allSites, ceName, plugin, jobSlots):
    """
    _addSites_

    Add the given sites to resource control and add tasks as well.
    """
    if options.jobSlots == None:
        jobSlots = 10
    else:
        jobSlots = options.jobSlots

    for siteName in allSites.keys():
        if ceName == None:
            updateSiteInfo(resourceControl, siteName, jobSlots,
                           siteName, allSites[siteName], plugin, siteName)
        else:
            updateSiteInfo(resourceControl, siteName, jobSlots,
                           ceName, allSites[siteName], plugin, siteName)

        updateThresholdInfo(resourceControl, siteName, "Merge", jobSlots,
                            priority = 5)
        updateThresholdInfo(resourceControl, siteName, "Cleanup", jobSlots,
                            priority = 5)
        updateThresholdInfo(resourceControl, siteName, "LogCollect", jobSlots,
                            priority = 3)
        updateThresholdInfo(resourceControl, siteName, "Skim", jobSlots,
                            priority = 2)
        updateThresholdInfo(resourceControl, siteName, "Production", jobSlots,
                            priority = 1)        
        updateThresholdInfo(resourceControl, siteName, "Processing", jobSlots,
                            priority = 1)
        updateThresholdInfo(resourceControl, siteName, "Analysis", jobSlots,
                            priority = 1)

    return

def printThresholds(resourceControl, desiredSiteName):
    """
    _printThresholds_

    Print out the current resource control thresholds.
    """
    print "Thresholds and current status for all sites:\n"

    thresholds = resourceControl.listThresholdsForSubmit()

    for siteName in thresholds.keys():
        if desiredSiteName and desiredSiteName != siteName:
            continue
        siteThresholds = thresholds[siteName]

        if len(siteThresholds) < 1:
            # No thresholds
            print("No thresholds for site %s" % siteName)
            continue

        siteSlots = siteThresholds[0]["total_slots"]
        siteJobs = siteThresholds[0]["total_running_jobs"]        
        print "%s - %d running, %d slots total:" % (siteName, siteJobs, siteSlots)

        for task in siteThresholds:
            print "  %s - %d running, %d max, priority %s" % \
                  (task['task_type'], task["task_running_jobs"],
                   task["max_slots"], str(task.get("priority", 1)))
            if task["task_running_jobs"] > 0:
                taskWorkloads = resourceControl.listWorkloadsForTaskSite(task['task_type'], siteName)
                for t in taskWorkloads:
                    print "    %d - %s" % (t["running"], t["task"])
            
        print ""    

def updateSiteInfo(resourceControl, siteName, jobSlots = None,
                   ceName = None, seName = None, plugin = None,
                   cmsName = None):
    """
    _updateSiteInfo_

    Add a site to the resource control database if it doesn't exist.  Update
    information about sites in the database if it already exists.
    """
    if resourceControl.listSiteInfo(siteName) == None:
        if jobSlots == None or ceName == None or seName == None or plugin == None:
            print "You must specify the number of job slots, the SE name, "
            print "the CE name and a plugin when adding a site."
            print ""
            myOptParser.print_help()
            sys.exit(1)

        print "Adding %s to the resource control db..." % siteName
        resourceControl.insertSite(siteName = siteName, jobSlots = int(jobSlots),
                                   seName = seName, ceName = ceName,
                                   plugin = plugin, cmsName = cmsName)
        return

    if jobSlots != None:
        resourceControl.setJobSlotsForSite(siteName = siteName, jobSlots = jobSlots)

    if seName != None:
        print "It's not possible to change a site's SE name after the site has"
        print "been added to the database."
        sys.exit(1)

    if ceName != None:
        print "It's not possible to change a site's CE name after the site has"
        print "been added to the database."
        sys.exit(1)

    return

def updateThresholdInfo(resourceControl, siteName, taskType, maxSlots, priority = None):
    """
    _updateThresholdInfo_

    Add or update a task threshold in the database.
    """
    if resourceControl.listSiteInfo(siteName) == None:
        print "You must add the site to the database before you can add"
        print "thresholds."
        print ""
        myOptParser.print_help()
        sys.exit(1)        

    if maxSlots == None:
        print "You must provide the maximum number of slots."
        print ""
        myOptParser.print_help()
        sys.exit(1)
    
    resourceControl.insertThreshold(siteName = siteName, taskType = taskType,
                                    maxSlots = int(maxSlots), priority = priority)
    return

myOptParser = createOptionParser()
(options, args) = myOptParser.parse_args()
connectToDB()
myResourceControl = ResourceControl()

if options.printThresholds:
    printThresholds(myResourceControl, options.siteName)
    sys.exit(0)
else:
    if options.addT1s == True:
        t1Sites = getCMSSiteInfo("T1*")
        addSites(myResourceControl, t1Sites, options.ceName, options.plugin,
                 options.jobSlots)
    elif options.addT2s == True:
        t2Sites = getCMSSiteInfo("T2*")
        addSites(myResourceControl, t2Sites, options.ceName, options.plugin,
                 options.jobSlots)
    elif options.addAllSites == True:
        allSites = getCMSSiteInfo("*")
        addSites(myResourceControl, allSites, options.ceName, options.plugin,
                 options.jobSlots)
    elif options.siteName == None:
        print "You must specify a site name."
        myOptParser.print_help()
        sys.exit(1)
    elif options.taskType == None:
        updateSiteInfo(myResourceControl, options.siteName, options.jobSlots,
                       options.ceName, options.seName, options.plugin, options.cmsName)
        sys.exit(0)
    else:
        updateThresholdInfo(myResourceControl, options.siteName,
                            options.taskType, options.maxSlots, priority = options.priority)
        sys.exit(0)
