#!/usr/bin/env python
# encoding: utf-8
"""
wmagent-mod-config.py

Created by Dave Evans on 2011-01-19.
Copyright (c) 2011 Fermilab. All rights reserved.
"""

import sys
import getopt
import imp
import socket
import traceback
import os

from WMCore.Configuration import saveConfigurationFile
from WMCore.Configuration import Configuration
from WMCore.Lexicon import sanitizeURL

help_message = '''
The help message goes here.
'''


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def importConfigTemplate(filename):
    """
    _importConfigTemplate_

    Given filename, load it and grab the configuration object from it

    """
    mod = imp.load_module("wmcore_config_input", open(filename, 'r'), filename, (".py", "r", imp.PY_SOURCE)   )
    config = getattr(mod, 'config', None)
    if config == None:
        msg = "No config attribute found in %s" % filename
        raise RuntimeError, msg
    return config

def saveConfiguration(configObject, outputPath):
    """
    _saveConfiguration_

    Save the configuration to the output path provided

    """
    saveConfigurationFile(configObject, outputPath)
    os.chmod(outputPath, 0600)


def modifyConfiguration(config, **args):
    """
    _modifyConfiguration_

    Given the dictionary of key: value, look up the entry matching the key in the configuration
    and set it to that value in the config

    """
    mapping = {
        "coredb_url" : [("CoreDatabase","connectUrl") ],
        "mysql_url" : [("CoreDatabase","connectUrl") ],
        "couch_url" : [("JobStateMachine", "couchurl"), ("ACDC", "couchurl"), ("WorkQueueManager", "couchurl"),

                       ],
        "working_dir" : [("General", "workDir")],
    }

    for k,v in args.items():
        parameters = mapping.get(k, [])
        for p in parameters:
            if hasattr(config, p[0]):
                section = getattr(config, p[0])
                setattr(section, p[1], v)
    for component in config.listComponents_():
        compCfg = getattr(config, component)
        compCfg.componentDir = "%s/%s" % (args['working_dir'], component)

        if component == "JobCreator":
            compCfg.jobCacheDir = "%s/%s/JobCache" % (args['working_dir'], component)

        if component == "JobAccountant":
            compCfg.specDir = "%s/%s/SpecCache" % (args['working_dir'], component)

    localhost = socket.gethostname()
    for webapp in config.listWebapps_():
        compCfg = getattr(config, webapp)
        compCfg.componentDir = "%s/%s" % (args['working_dir'], webapp)
        # Webtool REST service host location
        compCfg.Webtools.host = localhost

    # hostname locations
    config.Agent.hostName = localhost

    # configure MySQL specific settings
    if args.get('mysql_socket'):
        if hasattr(config,"CoreDatabase"):
            config.CoreDatabase.socket = args['mysql_socket']
        if hasattr(config,"AlertGenerator"):
            # configuration for MySQL server CPU monitor: mysqlCPUPoller (percentage values)
            config.AlertGenerator.section_("mysqlCPUPoller")
            config.AlertGenerator.mysqlCPUPoller.soft = 200 # [percent]
            config.AlertGenerator.mysqlCPUPoller.critical = 250 # [percent]
            config.AlertGenerator.mysqlCPUPoller.pollInterval = 60 # [second]
            # period during which measurements are collected before evaluating for possible alert triggering
            config.AlertGenerator.mysqlCPUPoller.period = 300 # [second]
            # configuration for MySQL memory monitor: mysqlMemPoller (percentage values)
            config.AlertGenerator.section_("mysqlMemPoller")
            config.AlertGenerator.mysqlMemPoller.soft = 20 # [percent]
            config.AlertGenerator.mysqlMemPoller.critical = 25 # [percent]
            config.AlertGenerator.mysqlMemPoller.pollInterval = 60 # [second]
            # period during which measurements are collected before evaluating for possible alert triggering
            config.AlertGenerator.mysqlMemPoller.period = 300 # [second]
            # configuration for MySQL database size: mysqlDbSizePoller (gigabytes values)
            config.AlertGenerator.section_("mysqlDbSizePoller")
            config.AlertGenerator.mysqlDbSizePoller.soft = 20 # GB
            config.AlertGenerator.mysqlDbSizePoller.critical = 25 # GB
            config.AlertGenerator.mysqlDbSizePoller.pollInterval = 600 # [second]

    if hasattr(config,"WorkloadSummary"):
        splited = args["workload_summary_url"].strip().rstrip('/').rsplit('/', 1)
        config.WorkloadSummary.couchurl = args["couch_url"]
        config.WorkloadSummary.database = splited[1]

    if hasattr(config,"TaskArchiver"):
        splited = args["workload_summary_url"].strip().rstrip('/').rsplit('/', 1)
        config.TaskArchiver.workloadSummaryCouchURL = splited[0]
        config.TaskArchiver.workloadSummaryCouchDBName = splited[1]
        config.TaskArchiver.localCouchURL = "%s/%s" % (config.JobStateMachine.couchurl, config.JobStateMachine.couchDBName)
        config.TaskArchiver.localQueueURL = "%s/%s" % (config.WorkQueueManager.couchurl, config.WorkQueueManager.dbname)
        config.TaskArchiver.localWMStatsURL = "%s/%s" % (config.JobStateMachine.couchurl, config.JobStateMachine.jobSummaryDBName)
        config.TaskArchiver.centralWMStatsURL = args["wmstats_url"]


    if hasattr(config,"AsyncTransfer"):
        config.CoreDatabase.connectUrl = '%s/asynctransfer_agent' % args["couch_url"]
        config.AsyncTransfer.couch_instance = args["couch_url"]
        config.AsyncTransfer.data_source = args["couch_url"]
        config.AsyncTransfer.serverDN = args["host_dn"]
        config.AsyncTransfer.couch_statinstance = args["couch_url"]
        config.AsyncTransfer.couch_user_monitoring_instance = args["couch_url"]
        config.AsyncTransfer.user_monitoring_instance = args["wmstats_url"]
        config.AsyncTransfer.opsProxy = args["ops_proxy"]


    if hasattr(config,"DBSPublisher"):
        config.DBSPublisher.couch_instance = args["couch_url"]
        config.DBSPublisher.serverDN = args["host_dn"]
        config.DBSPublisher.userFileCacheEndpoint = args["ufc_service_url"]
        config.DBSPublisher.opsProxy = args["ops_proxy"]

    if hasattr(config,"CRABInterface"):
        config.CRABInterface.Webtools.host = args["cs_hostname"]
        config.CRABInterface.Webtools.port = int(args["cs_port"])
        config.CRABInterface.serverDN = args["host_dn"]
        config.CRABInterface.views.active.crab.model.couchUrl = args["couch_url"]
        config.CRABInterface.views.active.crab.jsmCacheCouchURL = args["couch_url"]
        config.CRABInterface.ACDCCouchURL = args["couch_url"]
        config.CRABInterface.configCacheCouchURL = args["couch_url"]
        config.CRABInterface.sandBoxCacheHost = args["sb_hostname"]
        config.CRABInterface.sandBoxCachePort = int(args["sb_port"])
        config.CRABInterface.sandBoxCacheBasepath = 'userfilecache/userfilecache'
        config.CRABInterface.clientMapping = args["client_mapping"]

    if hasattr(config,"UserFileCache"):
        config.UserFileCache.Webtools.host = args["ufc_hostname"]
        config.UserFileCache.Webtools.port = int(args["ufc_port"])
        config.UserFileCache.views.active.userfilecache.serviceURL = args["ufc_service_url"]
        config.UserFileCache.userCacheDir = args["ufc_cachedir"]

    if hasattr(config, "reqmgr"):
        config.reqmgr.Webtools.host = args["reqmgr_hostname"]
        config.reqmgr.Webtools.port = int(args["reqmgr_port"])
        config.reqmgr.couchUrl = args["couch_url"]
        config.reqmgr.configDBName = "wmagent_configcache"
        config.reqmgr.views.active.create.requestor = "cmsdataops"
        config.reqmgr.admin = "gutsche@fnal.gov"
        config.reqmgr.views.active.reqMgr.model.couchUrl = args["couch_url"]
        config.reqmgr.views.active.create.requestor = "cmsdataops"
        config.reqmgr.database.connectUrl = args["mysql_url"]
        config.reqmgr.database.socket = args["mysql_socket"]
        config.reqmgr.views.active.monitorSvc.serviceURL = "http://%s:%s/reqmgr/reqMgr" % (
                                                           localhost, config.reqmgr.Webtools.port)
        config.reqmgr.views.active.monitorSvc.workloadSummaryCouchURL = sanitizeURL(args["workload_summary_url"])['url']

    # hating having to add this when WMAgentConfig.py has everything set up ...
    if  hasattr(config, "AlertProcessor"):
        if hasattr(config.AlertProcessor.critical.sinks, "couch"):
            config.AlertProcessor.critical.sinks.couch.url = args["couch_url"]
        if hasattr(config.AlertProcessor.soft.sinks, "couch"):
            config.AlertProcessor.soft.sinks.couch.url = args["couch_url"]
        # the AlertCollector database has be created beforehand (and couchapp pushed), this
        # location will change in the future , as described on the ticket 1640
        if hasattr(config.AlertProcessor.critical.sinks, "rest"):
            config.AlertProcessor.critical.sinks.rest.uri = args["couch_url"] + "/" + "alertscollector"
        if hasattr(config.AlertProcessor.soft.sinks, "rest"):
            config.AlertProcessor.soft.sinks.rest.uri = args["couch_url"] + "/" + "alertscollector"
        if hasattr(config.AlertProcessor.critical.sinks, "file"):
            config.AlertProcessor.critical.sinks.file.outputfile = os.path.join(args['working_dir'], "AlertsFileSinkCritical.json")
        if hasattr(config.AlertProcessor.soft.sinks, "file"):
            config.AlertProcessor.soft.sinks.file.outputfile = os.path.join(args['working_dir'], "AlertsFileSinkSoft.json")
        if hasattr(config.AlertProcessor.critical.sinks, "email"):
            config.AlertProcessor.critical.sinks.email.fromAddr = "noreply@cern.ch"
        if hasattr(config.AlertProcessor.soft.sinks, "email"):
            config.AlertProcessor.soft.sinks.email.fromAddr = "noreply@cern.ch"
    if  hasattr(config, "AlertGenerator"):
        if hasattr(config.AlertGenerator, "couchDbSizePoller"):
            config.AlertGenerator.couchDbSizePoller.couchURL = args["couch_url"]
        if hasattr(config.AlertGenerator, "couchCPUPoller"):
            config.AlertGenerator.couchCPUPoller.couchURL = args["couch_url"]
        if hasattr(config.AlertGenerator, "couchMemPoller"):
            config.AlertGenerator.couchMemPoller.couchURL = args["couch_url"]
        if hasattr(config.AlertGenerator, "couchErrorsPoller"):
            config.AlertGenerator.couchErrorsPoller.couchURL = args["couch_url"]

    # custom global workqueue
    if hasattr(config, "WorkQueueManager") and getattr(config.WorkQueueManager, "level", None) == 'GlobalQueue':
        if args.get('workqueue_db_name'):
            config.WorkQueueManager.dbname = args['workqueue_db_name']
            config.WorkQueueManager.inboxDatabase = config.WorkQueueManager.dbname + '_inbox'
        config.WorkQueueManager.reqMgrConfig['endpoint'] = "http://%s:%s/reqmgr/reqMgr/" % (args["reqmgr_hostname"], args["reqmgr_port"])
        config.WorkQueueManager.queueParams['WMStatsCouchUrl'] = "%s/%s" % (config.WorkQueueManager.couchurl.rstrip(), config.WorkQueueManager.wmstatDBName)

    # Custom Local WorkQueue
    if hasattr(config, "WorkQueueManager") and getattr(config.WorkQueueManager, "level", None) == 'LocalQueue':
        if args.get("global_workqueue_url", None):
            config.WorkQueueManager.queueParams["ParentQueueCouchUrl"] = args["global_workqueue_url"]

        if args.get('workqueue_db_name'):
            config.WorkQueueManager.dbname = args['workqueue_db_name']
            config.WorkQueueManager.inboxDatabase = config.WorkQueueManager.dbname + '_inbox'

    # custom wmbs service
    if hasattr(config, "WMBSService"):
        if args.get('wmbs_service_port'):
            config.WMBSService.Webtools.port = int(args['wmbs_service_port'])
        config.WMBSService.views.active.wmbs.couchConfig.couchURL = sanitizeURL(args["couch_url"])['url']
        config.WMBSService.views.active.wmagent.couchConfig.couchURL = sanitizeURL(args["couch_url"])['url']

    # custom AnalyticsDataCollector
    if hasattr(config, "AnalyticsDataCollector"):
        config.AnalyticsDataCollector.localCouchURL = "%s/%s" % (config.JobStateMachine.couchurl, config.JobStateMachine.couchDBName)
        config.AnalyticsDataCollector.localQueueURL = "%s/%s" % (config.WorkQueueManager.couchurl, config.WorkQueueManager.dbname)
        config.AnalyticsDataCollector.localWMStatsURL = "%s/%s" % (config.JobStateMachine.couchurl, config.JobStateMachine.jobSummaryDBName)
        config.AnalyticsDataCollector.centralWMStatsURL = args["wmstats_url"]

    return config

def main(argv=None):
    if argv is None:
        argv = sys.argv

    inputFile = None
    outputFile = None
    parameters = {}

    try:
        try:
            opts, args = getopt.getopt(argv[1:], "h",
            ["help", "input=", "output=", "mysql_socket=", "mysql_url=", "couch_url=",
             "working_dir=", "reqmgr_hostname=", "reqmgr_port=", "global_workqueue_url=",
             "workqueue_db_name=", "cs_hostname=", "cs_port=", "host_dn=", "couch_url=",
             "sb_hostname=", "sb_port=", "sb_basepath=", "ufc_hostname=", "ufc_port=",
             "ufc_service_url=", "ufc_cachedir=", "client_mapping=", "wmbs_service_port=",
             "workload_summary_url=", "coredb_url=", "wmstats_url=", "ops_proxy="])

        except getopt.error, msg:
            raise Usage(msg)

        # option processing
        for option, value in opts:
            if option in ("-h", "--help"):
                raise Usage(help_message)
            if option == "--output":
                outputFile = value
            if option == "--input":
                inputFile = value
            if option in ('--mysql_socket', '--mysql_url', '--coredb_url', '--couch_url',
                          '--working_dir', '--reqmgr_hostname', '--reqmgr_port',
                          '--global_workqueue_url', '--workqueue_db_name',
                          '--cs_hostname', '--cs_port', '--host_dn', '--couch_url',
                          '--sb_hostname', '--sb_port', '--sb_basepath', '--ufc_hostname',
                          '--ufc_port', '--ufc_service_url', '--ufc_cachedir',
                          '--client_mapping', '--wmbs_service_port', '--workload_summary_url',
                          '--wmstats_url', '--ops_proxy'):

                parameters[option[2:]] = value


    except Usage, err:
        print >> sys.stderr, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
        print >> sys.stderr, "\t for help use --help"
        return 2

    try:
        cfg = importConfigTemplate(inputFile)
    except Exception, ex:
        msg = "Failed to import template config: %s\n" % inputFile
        msg += str(ex)
        print >> sys.stderr, msg
        return 3
    try:
        cfg = modifyConfiguration(cfg, **parameters)
    except Exception, ex:
        msg = "Error modifying configuration:\n %s" % str(ex)
        print >> sys.stderr, msg
        print >> sys.stderr, traceback.format_exc()
        return 4
    try:
        saveConfiguration(cfg, outputFile)
    except Exception, ex:
        msg = "Error saving output configuration file:\n %s\n" % outputFile
        msg += str(ex)
        print >> sys.stderr, msg
        return 5

if __name__ == "__main__":
    sys.exit(main())


